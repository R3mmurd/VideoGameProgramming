local BG_COLOR = vmath.vector4(213/255, 237/255, 246/255, 1)

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("camera", "acquire_camera_focus")
	msg.post("parrot#collisionobject", "disable")

	self.camera_target = go.get_position("camera")

	self.initial_position = go.get_position("parrot")
	self.initial_rotation = go.get_rotation("parrot")

	self.camera_offset = go.get_world_position("parrot") - go.get_world_position("camera")

	self.camera_zoom = 1

	self.panning = false
	self.aiming = false
	self.flinging = false
	self.idle_frames = 0
end

function final(self)
	msg.post(".", "release_input_focus")
	msg.post("camera", "release_camera_focus")
end

function update(self, dt)
	msg.post("@render:", "clear_color", { color = BG_COLOR })
	self.camera_target.y = math.max(0, self.camera_target.y)

	if self.flinging then
		self.camera_target = go.get_position("parrot") - self.camera_offset
	end

	local dist = math.abs(go.get_position("parrot").x - self.initial_position.x)
	local target_zoom = math.max(1, math.min(1.5, math.sqrt(dist /self.initial_position.x)))
	self.camera_zoom = self.camera_zoom + (target_zoom - self.camera_zoom) * 0.05
	go.set_position(vmath.lerp(0.1, go.get_position("camera"), self.camera_target), "camera")
	msg.post("@render:", "use_fixed_projection", { zoom = 1 / self.camera_zoom })

	if self.flinging then
		local linear_velocity = go.get("parrot#collisionobject", "linear_velocity")
		local angular_velocity = go.get("parrot#collisionobject", "angular_velocity")

		local linear_speed = vmath.length(linear_velocity)
		local angular_speed = vmath.length(angular_velocity)

		if linear_speed < 20 and angular_speed < 5 then
			self.idle_frames = self.idle_frames + 1

			if self.idle_frames > 100 then
				msg.post("parrot#collisionobject", "disable")
				msg.post(".", "acquire_input_focus")
				go.set_position(self.initial_position, "parrot")
				go.set_rotation(self.initial_rotation, "parrot")
				self.flinging = false
				self.camera_target = self.initial_position - self.camera_offset
			end
		else
			self.idle_frames = 0
		end
	end
end	

function on_input(self, action_id, action)
	local action_position = vmath.vector3(action.x, action.y, 0)
	if action_id == hash('touch') then
		if action.pressed then
			self.pressed_position = action_position

			if vmath.length(action_position + go.get_world_position("camera") - go.get_world_position("parrot")) < 50 then
				self.aiming = true
			else			
				self.panning = true
				self.pressed_camera_position = go.get_position("camera")
			end
			
		elseif action.released then
			if self.aiming then
				local direction = self.initial_position - go.get_position("parrot")
				msg.post("parrot#collisionobject", "enable")

				local force = direction * 950 * go.get("parrot#collisionobject", "mass")
				local pos = go.get_world_position("parrot")

				msg.post("parrot#collisionobject", "apply_force", { force = force, position = pos }) 

				msg.post(".", "release_input_focus")
				
				self.aiming = false
				self.flinging = true
				self.idle_frames = 0
				self.pressed_position = nil
			else
				self.panning = false
			end
		end
	end

	if self.aiming then
		local delta = self.pressed_position - action_position

		if vmath.length(delta) > 150 then
			delta = vmath.normalize(delta) * 150
		end

		go.set_position(self.initial_position - delta, "parrot")
	
	elseif self.panning then
		local delta = self.pressed_position - action_position
		local position = self.pressed_camera_position + delta
		position.x = math.min(4000, math.max(-4000, position.x))
		self.camera_target = position
	end
end